/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@jacobx1/of-sdk/build/osa/osa.js
var require_osa = __commonJS({
  "node_modules/@jacobx1/of-sdk/build/osa/osa.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.omniFunc = exports.stringifyCall = exports.execOmniJsRaw = void 0;
    var child_process_1 = require("child_process");
    function osa(fn) {
      const code = `
        ObjC.import('stdlib')
        var fn   = (${fn.toString()})
        var args = JSON.parse($.getenv('OSA_ARGS'))
        var out  = fn.apply(null, args)
        JSON.stringify(out)
    `;
      const osafn = function(...args) {
        return new Promise((resolve, reject) => {
          const child = child_process_1.execFile("/usr/bin/osascript", ["-l", "JavaScript"], {
            env: {
              OSA_ARGS: JSON.stringify(args)
            },
            maxBuffer: 1024 * 1e3
          }, (err, stdout, stderr) => {
            if (err) {
              return reject(err);
            }
            if (stderr) {
              console.log(stderr);
            }
            if (!stdout) {
              resolve(void 0);
            }
            try {
              resolve(JSON.parse(stdout.toString()));
            } catch (e) {
              reject(e);
            }
          });
          child.stdin.write(code);
          child.stdin.end();
        });
      };
      return osafn;
    }
    exports.execOmniJsRaw = osa((scpt) => {
      const omnifocus = Application("Omnifocus");
      return omnifocus.evaluateJavascript(scpt);
    });
    var stringifyMapper = (item) => {
      if (typeof item === "function") {
        return item.toString();
      }
      if (Array.isArray(item)) {
        return `[${item.map(stringifyMapper).join(", ")}]`;
      }
      if (typeof item === "object" && item != null) {
        const valuesConcated = Object.entries(item).map(([key, val]) => ({
          key,
          val: stringifyMapper(val)
        })).map((item2) => `${item2.key}: ${item2.val}`).join(", ");
        return `{${valuesConcated}}`;
      }
      return JSON.stringify(item);
    };
    exports.stringifyCall = (code, ...args) => {
      function scpt(code2, ...scriptArgs) {
        return code2.call(this, ...scriptArgs);
      }
      const argList = [code, ...args].map(stringifyMapper).map((val) => `(${val})`).join(", ");
      return `${scpt}; scpt.call(this, ${argList});`;
    };
    exports.omniFunc = (code, deps) => {
      return (...args) => {
        const rawCodeString = exports.stringifyCall(code, deps, ...Array.from(args));
        return exports.execOmniJsRaw(rawCodeString);
      };
    };
  }
});

// node_modules/@jacobx1/of-sdk/build/transform/taskMapper.js
var require_taskMapper = __commonJS({
  "node_modules/@jacobx1/of-sdk/build/transform/taskMapper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function taskMapper({ name, completed, id, completionDate, dropDate, added, modified, deferDate, dueDate, estimatedMinutes, note, tags, project }) {
      return {
        name,
        completed,
        dropDate: dropDate && dropDate.toISOString(),
        added: added && added.toISOString(),
        modified: modified && modified.toISOString(),
        deferDate: deferDate && deferDate.toISOString(),
        dueDate: dueDate && dueDate.toISOString(),
        estimatedMinutes,
        note,
        id: id.primaryKey,
        completionDate: completionDate && completionDate.toISOString(),
        tags: tags.map((tag) => ({
          name: tag.name,
          id: tag.id.primaryKey
        })),
        project: project && {
          name: project.name,
          id: project.id.primaryKey
        }
      };
    }
    exports.default = taskMapper;
  }
});

// node_modules/@jacobx1/of-sdk/build/transform/tagMapper.js
var require_tagMapper = __commonJS({
  "node_modules/@jacobx1/of-sdk/build/transform/tagMapper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function tagMapper({ id, name }) {
      return {
        id: id.primaryKey,
        name
      };
    }
    exports.default = tagMapper;
  }
});

// node_modules/@jacobx1/of-sdk/build/transform/projectMapper.js
var require_projectMapper = __commonJS({
  "node_modules/@jacobx1/of-sdk/build/transform/projectMapper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function projectMapper({ name, completed, id, completionDate, dropDate, deferDate, dueDate, estimatedMinutes, note, tags }) {
      return {
        name,
        completed,
        dropDate: dropDate && dropDate.toISOString(),
        deferDate: deferDate && deferDate.toISOString(),
        dueDate: dueDate && dueDate.toISOString(),
        estimatedMinutes,
        note,
        id: id.primaryKey,
        completionDate: completionDate && completionDate.toISOString(),
        tags: tags.map((tag) => ({
          name: tag.name,
          id: tag.id.primaryKey
        }))
      };
    }
    exports.default = projectMapper;
  }
});

// node_modules/@jacobx1/of-sdk/build/osa/omnijs.js
var require_omnijs = __commonJS({
  "node_modules/@jacobx1/of-sdk/build/osa/omnijs.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.completeTaskById = exports.deleteTaskById = exports.createTask = exports.getTasksForPerspective = exports.getTags = exports.getProjects = exports.getTasks = void 0;
    var osa_1 = require_osa();
    var taskMapper_1 = __importDefault(require_taskMapper());
    var tagMapper_1 = __importDefault(require_tagMapper());
    var projectMapper_1 = __importDefault(require_projectMapper());
    function allItemsFilter() {
      return true;
    }
    exports.getTasks = osa_1.omniFunc(function(deps, filter) {
      return this.flattenedTasks.filter((item) => item.id.objectClass.name === "Task").filter(filter || deps.defaultFilter).map((item) => deps.taskMapper(item));
    }, {
      taskMapper: taskMapper_1.default,
      defaultFilter: allItemsFilter
    });
    exports.getProjects = osa_1.omniFunc(function(deps, filter) {
      return this.flattenedProjects.filter(filter || deps.defaultFilter).map(deps.projectMapper);
    }, {
      projectMapper: projectMapper_1.default,
      defaultFilter: allItemsFilter
    });
    exports.getTags = osa_1.omniFunc(function([mapperMethod, defaultFilter], filter) {
      return this.flattenedTags.filter(filter || defaultFilter).map((item) => mapperMethod(item));
    }, [tagMapper_1.default, allItemsFilter]);
    exports.getTasksForPerspective = osa_1.omniFunc(function(deps, perspectiveName) {
      const perspective = this.Perspective.all.find((item) => item.name === perspectiveName);
      this.document.windows[0].perspective = perspective;
      return this.document.windows[0].content.nodesForObjects(this.flattenedTasks).filter((item) => item.object.id.objectClass.name === "Task").map((item) => item.object).map(deps.taskMapper);
    }, {
      taskMapper: taskMapper_1.default
    });
    exports.createTask = osa_1.omniFunc(function(deps, title, options = {}) {
      const project = options.projectId ? this.Project.byIdentifier(options.projectId) : void 0;
      const task = new this.Task(title, project);
      if (options.note) {
        task.note = options.note;
      }
      return deps.taskMapper(task);
    }, {
      taskMapper: taskMapper_1.default
    });
    exports.deleteTaskById = osa_1.omniFunc(function(deps, id) {
      const task = this.Task.byIdentifier(id);
      this.deleteObject(task);
    }, {});
    exports.completeTaskById = osa_1.omniFunc(function(deps, id) {
      const task = this.Task.byIdentifier(id);
      task.markComplete();
    }, {});
  }
});

// node_modules/@jacobx1/of-sdk/build/index.js
var require_build = __commonJS({
  "node_modules/@jacobx1/of-sdk/build/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !exports2.hasOwnProperty(p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_omnijs(), exports);
    var osa_1 = require_osa();
    Object.defineProperty(exports, "omniFunc", { enumerable: true, get: function() {
      return osa_1.omniFunc;
    } });
  }
});

// node_modules/obsidian-dataview/lib/index.js
var require_lib = __commonJS({
  "node_modules/obsidian-dataview/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require("obsidian");
    var getAPI2 = (app) => {
      var _a;
      if (app)
        return (_a = app.plugins.plugins.dataview) === null || _a === void 0 ? void 0 : _a.api;
      else
        return window.DataviewAPI;
    };
    var isPluginEnabled = (app) => app.plugins.enabledPlugins.has("dataview");
    exports.getAPI = getAPI2;
    exports.isPluginEnabled = isPluginEnabled;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianOmnifocus
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/obsidianApi.ts
var _app = null;
function setApp(app) {
  _app = app;
}
async function updateNote(filePath, startPos, endPos, needle, replace) {
  if (!_app) {
    throw new Error("No app defined!");
  }
  const file = _app.vault.getAbstractFileByPath(filePath);
  if (!file) {
    throw new Error("File not found!");
  }
  const currentText = await _app.vault.adapter.read(filePath);
  let newText = "";
  const startOfNeedle = currentText.indexOf(needle, startPos);
  if (startOfNeedle === -1) {
    throw new Error("Couldn't find the tag");
  }
  if (startOfNeedle > endPos) {
    throw new Error("Couln't find the tag in the right place");
  }
  newText = currentText.substring(0, startOfNeedle);
  newText += replace;
  newText += currentText.substring(startOfNeedle + needle.length);
  console.log("Original Text", currentText);
  console.log("Updated Text", newText);
  _app.vault.adapter.write(filePath, newText);
}

// src/syncManager.ts
var import_of_sdk = __toESM(require_build());

// src/dataviewApi.ts
var import_obsidian_dataview = __toESM(require_lib());
function fetchOmnifocusTaggedTasks() {
  const dataViewApi = (0, import_obsidian_dataview.getAPI)();
  if (!dataViewApi) {
    throw new Error("Dataview is not available!");
  }
  const pages = dataViewApi.pages("").values;
  const tasks = pages.reduce((currTasks, page) => {
    console.log("page", page);
    const pageTasks = page.file.tasks.values.reduce((currPageTasks, task) => {
      if (task.tags.indexOf("#omnifocus") > -1) {
        currPageTasks.push(task);
      }
      return currPageTasks;
    }, []);
    return [...currTasks, ...pageTasks];
  }, []);
  return tasks;
}

// src/syncManager.ts
async function createTaskAndUpdate(vaultName, task) {
  await (0, import_of_sdk.createTask)(task.text, {
    note: `obsidian://open?vault=${encodeURI(vaultName)}&file=${encodeURI(task.path)}`
  });
  await updateNote(task.path, task.position.start.offset, task.position.end.offset, "#omnifocus ", "#omnifocus-synced ");
}
async function syncTasks(vaultName) {
  console.log("[obsidian-omnifocus] Fetching Tagged Tasks...");
  const tasks = fetchOmnifocusTaggedTasks();
  console.log("[obsidian-omnifocus] Fetched Tagged Tasks.", tasks);
  console.log("[obsidian-omnifocus] Iterating over tasks to send to Omni...");
  const creationTasks = [];
  tasks.forEach((task) => {
    creationTasks.push(createTaskAndUpdate(vaultName, task));
  });
  console.log("[obsidian-omnifocus] Finished iterating over tasks.");
  await Promise.all(creationTasks);
}

// src/main.ts
var ObsidianOmnifocus = class extends import_obsidian.Plugin {
  async onload() {
    setApp(this.app);
    this.addCommand({
      id: "obsidian-omnifocus-sync",
      name: "Sync tagged tasks to OmniFocus",
      callback: () => syncTasks(this.app.vault.getName())
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
